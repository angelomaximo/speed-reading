const icon = {
  // ' ': '<img class="icon" src="./img/ .png">',
  // Countries a-z (pending) \\
  'argentina': '🇦🇷',
  'brazil': '🇧🇷',
  'canada': '🇨🇦',
  'china': '🇨🇳',
  'usa': '🇺🇸',
  'america': '🇺🇸',
  'switzerland': '🇨🇭',
  'vietnam': '🇻🇳',
  'spain': '🇪🇸',
  'germany': '🇩🇪',
  'france': '🇫🇷',
  'uk': '🇬🇧',
  'israel': '🇮🇱',
  'india': '🇮🇳',
  'iran': '🇮🇷',
  'italy': '🇮🇹',
  'japan': '🇯🇵',
  'mexico': '🇲🇽',
  'portugal': '🇵🇹',
  'russia': '🇷🇺',

  // Colors a-z \\
  'black': '<img class="icon" src="./img/black-circle.png">',
  'blue': '<img class="icon" src="./img/blue-circle.png">',
  'brown': '<img class="icon" src="./img/brown-circle.png">',
  'gray': '<img class="icon" src="./img/gray-circle.png">',
  'green': '<img class="icon" src="./img/green-circle.png">',
  'purple': '<img class="icon" src="./img/purple-circle.png">',
  'red': '<img class="icon" src="./img/red-circle.png">',
  'white': '<img class="icon" src="./img/white-circle.png">',
  'yellow': '<img class="icon" src="./img/yellow-circle.png">',

  // Foods a-z \\
  'apple': '🍎',
  'banana': '🍌',
  'coffee': '<img class="icon" src="./img/coffee.png">',
  'ice-cream': '🍦',
  'strawberry': '🍓',
  'pear': '🍐',
  'lemon': '🍋',
  'watermelon': '🍉',
  'grapes': '🍇',
  'cherries': '🍒',
  'blueberries': '🫐',
  'peach': '🍑',
  'mango': '🥭',
  'pineapple': '🍍',
  'coconut': '🥥',
  'kiwi': '🥝',
  'tomato': '🍅',
  'avocado': '🥑',
  'eggplant': '🍆',
  'broccoli': '🥦',
  'garlic': '🧄',
  'onion': '🧅',
  'carrot': '🥕',
  'salad': '🥗',
  'potato': '🥔',
  'peanut': '🥜',
  'honey': '🍯',
  'bread': '🍞',
  'egg': '🥚',
  'bacon': '🥓',
  'hamburger': '🍔',
  'pizza': '🍕',
  'sandwich': '🥪',
  'taco': '🌮',
  'spaghetti': '🍝',
  'burrito': '🌯',
  'salt': '🧂',
  'butter': '🧈',
  'sushi': '🍣',
  'rice': '🍚',
  'cake': '🍰',
  'chocolate': '🍫', 
  'cookie': '🍪',
  'popcorn': '🍿',
  'milk': '🥛',
  'beer': '🍺',
  'wine': '🍷',
  'whisky': '🥃',
  'meat': '🥩',
  'cheese': '🧀',
  'pie': '🥧',

  // Institutions a-z \\
  'bank': '🏦',
  'hospital': '🏥',
  'church': '⛪',
  
  // Human body a-z  \\
  'abdominals': '<img alt="abdominals" class="icon" src="./img/abdominals.png">',
  'arm': '<img class="icon" src="./img/arm.png">',
  'beard': '<img class="icon" src="./img/beard.png">',
  'blood': '<img class="icon" src="./img/blood.png">',
  'brain': '🧠',
  'ear': '<img class="icon" src="./img/ear.png">',
  'eye': '👁️',
  'fingerprint': '<img class="icon" src="./img/fingerprint.png">',
  'head': '<img class="icon" src="./img/head.png">',
  'intestine': '<img class="icon" src="./img/intestine.png">',
  'kidneys': '<img class="icon" src="./img/kidneys.png">',
  'leg': '🦵',
  'lips': '<img class="icon" src="./img/lips.png">',
  'liver': '<img class="icon" src="./img/liver.png">',
  'lungs': '<img class="icon" src="./img/lungs.png">',
  'muscle': '<img class="icon" src="./img/muscle.png">',
  'neuron': '<img class="icon" src="./img/neuron.png">',
  'nose': '<img class="icon" src="./img/nose.png">',
  'skin': '<img class="icon" src="./img/skin.png">',
  'skull': '<img class="icon" src="./img/skull.png">',
  'sperm': '<img class="icon" src="./img/sperm.png">',
  'spine': '<img class="icon" src="./img/spine.png">',
  'stomach': '<img class="icon" src="./img/stomach.png">',
  'teeth': '<img class="icon" src="./img/teeth.png">',
  'tongue': '<img class="icon" src="./img/tongue.png">',
  'hand': '✋',
  'hands': '✋s',
  'handful': '✋ful',
    
  // Animals a-z \\
  'cat': '🐱',
  'dog': '🐕',
  'bear': '🐻',
  'panda': '🐼',
  'koala': '🐨',
  'tiger': '🐅',  
  'lion': '🦁',   
  'cow': '🐄',   
  'pig': '🐷',
  'frog': '🐸',
  'sheep': '🐑',
  'monkey': '🐒', 
  'gorilla': '🦍',
  'orangutan': '🦧',
  'chicken': '🐔',
  'penguin': '🐧',
  'bird': '🐦',
  'wolf': '🐺',
  'fox': '🦊',
  'horse': '🐴',
  'zebra': '🦓',
  'snake': '🐍',
  'giraffe': '🦒', 
  'cockroach': '🪳',
  'spider': '🕷',
  'scorpion': '🦂',
  'worm': '🪱',
  'turtle': '🐢',
  'octopus': '🐙',
  'fish': '🐟',
  'dolphin': '🐬',
  'shark': '🦈',
  'whale': '🐋',
  'crocodile': '🐊',
  'elephant': '🐘',
  'eagle': '🦅',
  'duck': '🦆',
  'owl': '🦉',
  'feather': '🪶',
  'cactus': '🌵',
  'goat': '🐐',
  'tornado': '🌪',

  // objects \\
  'computer': '🖥️',
  'television': '<img class="icon" src="./img/television.png">',
  'phone': '📱',
  'laptop': '💻',
  'printer': '🖨',
  'keyboard': '⌨️',
  'candle': '🕯',
  'rock': '🪨',
  'rocks': '🪨s',
  'wood': '🪵',
  'woods': '🪵s',
  'shield': '🛡',
  'cigarette': '🚬',
  'telescope': '🔭',
  'hole': '🕳',
  'pill': '💊',
  'money': '💵',
  'spoon': '🥄',
  'camera': '📷',
  'bucket': '🪣',
  'battery': '🔋',
  'diamond': '💎',
  'toilet': '🚽',
  'shower': '🚿',
  'bathtub': '🛁',
  'toothbrush': '🪥',
  'razor': '🪒',
  'soap': '🧼',
  'sponge': '🧽',
  'chair': '🪑',
  'bed': '🛏',
  'door': '🚪',
  'mirror': '🪞',
  'window': '🪟',
  'balloon': '🎈',
  'calendar': '📅',
  'folder': '📁',
  'newspaper': '📰',
  'book': '📘',
  'notebook': '📓',
  'lock': '🔒',
  'pen': '🖊',
  'ladder': '🪜',
  'microphone': '🎙',
  'radio': '📻',
  'syringe': '💉',
  'knife': '🔪',
  'sword': '🗡',
  'car': '🚗',
  'cars': '🚗s',
  'taxi': '🚕',
  'bus': '🚌',
  'ambulance': '🚑',
  'motorcycle': '🏍',
  'bicycle': '🚲',
  'skateboard': '🛹',
  'helicopter': '🚁',
  'airplane': '🛩️',
  'rocket': '🚀',
  'satellite': '🛰',
  'volcano': '🌋',

  // action verbs \\
  'bath': '🛀',
  'sleeping': '🛌',
  'stop': '🛑',
  'sunrise': '🌅',
  'sunset': '🌇',
  'pregnant': '🤰',

  // General \\
  'cooking': '🍳',
  'world': '🌎',
  'real-world': 'real-🌎',
  'planet': '🪐',
  'fire': '🔥',
  'water': '💧',
  'ice': '🧊',
  'energy': '⚡',
  'wind': '🌬',
  'rainbow': '🌈',
  'wave': '🌊',
  'mushroom': '🍄',
  'currency': '🪙',
  'railway': '🛤️',
  'railroad': '!!!railroad icon needed!!!',
  'mountain': '🏔️',
  'bride': '👰🏻‍♀️',
  'male': '♂️',
  'female': '♀',
  'baby': '🚼',
  'beginner': '🔰',
  'desert': '🏜',
  'beach': '🏖',
  'island': '🏝',
  'city': '🏙',
  'castle': '🏰',
  'house': '🏠',
  'hotel': '🏨',
}
const abbreviation = {
  // ·ment = mt 
  // ing = ng
  // cal = al
  'for': 'f·',
  'you': 'u',
  'your': 'ur',
  'yours': '·urs',
  'with': 'w/',
  'without': 'w/out',
  'whatever': 'w/e',
  'what': 'w·t',
  'want': 'w·nt',
  'will': 'w·l',
  'well': 'we·l',
  'would': 'w·ld',
  'when': 'wh·n',
  'whenever': 'wh·n·v·r',
  'have': 'hv',
  'having': 'hv·ng',
  'here': 'h·r·',
  'know': 'k·w',
  'knowledge': 'k·w·dg·',
  'just': 'j·st',
  'unlike': 'unl·k·',
  'unlikely': 'unl·k·ly',
  'much': 'm·h',
  'very': 'v·',
  'back': 'b·k',
  'should': 'sh·ld',
  'really': 'r·ly',
  'right': 'r·t',
  'rights': 'r·ts',
  'feel': 'f·l',
  'great': 'gr·t',
  'keep': 'k·p',
  'keeps': 'k·ps',
  'keeping': 'k·p·ng',
  'happen': 'h·p·n',
  'still': 's·l',
  'last': 'l·t',
  'over': '·v·r',
  'overall': '·v·r·l',
  'recovery': 'r·c·ry',
  'overcome': '·v·r·c·m·',
  'week': 'w·k',
  'question': 'qstn', 'questions': 'qstn·s',
  'read': 'r·d',
  'seem': 'se·m',
  'though': 't·gh',
  'family': 'fml',
  'maybe': 'myb',
  '': '',
  '': '',
  '': '',
  // A- \\
  'actually': 'act·ly',
  'always': 'al·ys',
  'away': 'a·y',
  'about': 'ab·t',
  'acknowledge': 'ack·w·dg·',
  'attitude': 'at·tude', 'attitudes': 'at·tudes',
  'advantage': 'advtg', 'advantages': 'advtgs',
  'accelerate': 'aclrt',
  'alike': 'al·k·',
  'adjective': 'adj·',
  'academic': 'acad·',
  'account': 'acct·',
  'accountant': 'acct·ant',
  'accounting': 'acct·ng',
  'accommodation': 'accomm·',
  'administration': 'adm·tion',
  'administrator': 'adm·',
  'administrative': 'admin·',
  'agriculture': 'agric·',
  'agricultural': 'agric·al',
  'alternative': 'alt·',
  'association': 'assoc·',
  'associate': 'asoc·te', 'associates': 'asoc·tes',
  'authentication': 'auth·',
  'authenticate': 'auth·cate', 'authenticates': 'auth·s',
  'authority': 'autho·', 'authorities': 'autho·s',
  'argument': 'arg·', 'arguments': 'arg·s',
  'assumption': 'asmptn', 'assumptions': 'asmptns',
  'avenue': 'ave·',
  'answer': 'nwr', 'answers': 'nwrs',
  // B- \\
  'before': 'b4',
  'between': 'b·tw·n',
  'become': 'bcm', 'becomes': 'bcms',
  'bring': 'br·g', 'brings': 'br·gs',
  'believe': 'blv', 'believes': 'blvs',
  'behave': 'bhv', 'behaves': 'bhv·es',
  'behavior': 'bhvr', 'behaviors': 'bhvrs',
  'behaving': 'bhv·ng', 'behavings': 'bhv·ngs',
  'business': 'bus·',
  'bankruptcy': 'bankr·',
  'brotherhood': 'bhd·',
  'brother': 'bro·',
  'brothers': 'bro·s',
  'build': 'bld',
  'building': 'bldng',
  'bathroom': 'bthrom',
  'bedroom': '🛏️ro·m',
  'background': 'b·g·d',
  'boyfriend': 'boyfr·d',
  'bureaucracy': 'b·cracy',
  // C- \\
  'could': 'c·ld',
  'call': 'c·l',
  'called': 'c·led',
  'country': 'c·try',
  'create': 'crte', 'creates': 'crtes',
  'complete': 'cmplt', 'completes': 'cmplts',
  'cover': 'c·v·r',
  'coverage': 'c·v·r·g',
  'change': 'c·nge', 'changes': 'c·nges',
  'concept': 'cncpt', 'concepts': 'cncpts',
  'compete': 'cmpt', 'competes': 'cmpts',
  'competition': 'cmpt·tion', 'comptetitions': 'cmpt·tions',
  'competitor': 'cmptitor', 'competitors': 'cmptitors',
  'commitment': 'comtmt', 'commitments': 'cmtmts',
  'commit': 'comt', 'commits': 'comts',
  'committing': 'comt·ng',
  'compare': 'cmpr', 'compares': 'cmprs',
  'customer': 'cstmr', 'customers': 'cstmrs',
  'character': 'char·',
  'check': 'ch·k',
  'company': 'com·', 'companies': 'com·ies',
  'corporate': 'corp·',
  'corporation': 'corp·on', 'corporations': 'corp·ons',
  'capital': 'cap·t·',
  'catholic': 'cath·',
  'center': 'ctr',
  'centre': 'ctr',
  'central': 'ctr·al',
  'centralized': 'ctr·zed',
  'chemistry': 'chem·',
  'chemical': 'chem·al',
  'college': 'coll·',
  'clothes': 'cl·th·s',
  'clothing': 'cl·th·ng',
  'commerce': 'com·r·c',
  'commercial': 'com·r·cial',
  'community': 'c·m·ty',
  'compensation': 'comp·',
  'condominium': 'condo·',
  'consolidated': 'consol·',
  'construction': 'constr·',
  'contract': 'cont·',
  'cooperative': 'coop·',
  'correction': 'corr·',
  'contamination': 'contam·',
  'classroom': 'cl·ro·m',
  'class': 'cl·',
  'classic': 'cl·ic',
  'courtroom': 'courtro·m',
  'careful': 'crful',
  'carefully': 'crfuly',
  // D- \\
  'during': 'd·r·ng',
  'drive': 'drv', 'drives': 'drvs',
  'driving': 'drv·ng', 'drivings': 'drv·ngs',
  'decrease': 'dcrs', 'decreases': 'dcrs·s',
  'decreased': 'dcrs·ed',
  'database': 'DB', 'databases': 'DBS',
  'danger': 'dngr', 'dangers': 'dngrs',
  'dangerous': 'dngrous',
  'damage': 'dmg', 'damages': 'dmgs',
  'damaging': 'dmg·ng', 'damagings': 'dmg·ngs',
  'discover': 'd·c·v·r',
  'discovery': 'd·c·v·ry',
  'detail': 'd·t·l',
  'details': 'd·t·ls',
  'detailed': 'd·t·led',
  'defense': 'def·',
  'defend': 'def·nd',
  'defender': 'def·der',
  'definition': 'defi·',
  'department': 'dep·mt',
  'detention': 'det·',
  'digital': 'digi·',
  'direction': 'dir·',
  'director': 'direc·',
  'distribution': 'dist·',
  'distributing': 'dist·ng',
  'distributor': 'dist·tor', 'distributors': 'dist·tors',
  'division': 'div·', 'divisions': 'div·s',
  'document': 'doc·', 'documents': 'doc·s',
  'doctor': 'D·r', 'doctors': 'd·rs',
  'development': 'dev·mt', 'developmets': 'dev·mts',
  'developer': 'dev·r', 'developers': 'dev·rs',
  'delete': 'del·',
  // E- \\
  'enough': 'engh',
  'extreme': 'xtrm', 'extremes': 'xtrms',
  'extremely': 'xtrm·ly',
  'especially': 'spcly',
  'easy': 'esy',
  'email': 'em·l',
  'example': 'exmp·', 'examples': 'exmp·s',
  'economy': 'econ·',
  'economic': 'econ·ic', 'economics': 'eco·ics',
  'economical': 'econ·cal',
  'electric': 'elec·',
  'electrical': 'elec·ical',
  'electricity': 'elec·ity',
  'engine': 'eng·',
  'engineering': 'eng·ng',
  'engineer': 'eng·er', 'engineers': 'eng·ers',
  'entertainment': 'ent·mt',
  'environment': 'env·mt',
  'equipment': 'equip·', 'equipments': 'equip·s',
  'exchange': 'exch·',
  'exercise': 'xrcse', 'exercises': 'xrcses',
  'execution': 'exec·',
  'executive': 'exec·ve', 'executives': 'exec·ves',
  'element': 'elem·', 'elements': 'elem·s',
  'explore': 'expl·', 'explores': 'expl·s',
  'exploration': 'expl·t·n', 'explorations': 'expl·t·ns',
  'employ': 'emp·', 'employs': 'emp·s',
  'employee': 'emp·ee', 'employees': 'emp·ees',
  'employer': 'emp·er', 'employers': 'emp·ers',
  'entrepreneur': 'entrep·', 'entrepreneurs': 'entrep·s',
  'entrepreneurship': 'entrep·ship',
  'entrepreneurial': 'entrep·rial',
  'example': 'ex·',
  'experiment': 'xprmnt', 'experiments': 'xprmnts',
  'experimentation': 'xprmnt·on',
  'experimental': 'xprmnt·al',
  'experience': '·xp·',
  'expense': 'exp·',
  // F- \\
  'feature': 'ftr', 'features': 'ftrs', 
  'feedback': 'fdbk', 'feedbacks': 'fdbks',
  'fact': 'fct', 'facts': 'fcts',
  'first': '1st',
  'federal': 'fed·', 'federals': 'fed·s',
  'federation': 'fed·tion', 'federations': 'fed·s',
  'finance': 'fin·', 'finances': 'fin·s',
  'financed': 'fin·ed',
  'financing': 'fin·ng',
  'financial': 'fin·ial', 'financials': 'fin·als',
  'foundation': 'foun·tion', 'foundations': 'foun·tions',
  'functional': 'func·al', 'functionals': 'func·als',
  'functionality': 'func·ity', 'functinalities': 'func·ities',
  'friend': 'fr·d', 'friends': 'fr·ds',
  'friendly': 'fr·dly',
  'function': 'func·', 'functions': 'func·s',
  'friendship': 'fr·dship', 'friendships': 'fr·dships',
  // G- \\
  'general': 'gen·', 'generals': 'gen·s',
  'global': 'glob·',
  'government': 'gov·', 'governments': 'gov·s',
  'group': 'gr·p', 'groups': 'gr·ps',
  'girlfriend': 'girlfr·d',
  // I- \\
  'improve': 'imprv', 'improves': 'imprvs',
  'improving': 'imprv·ng', 'improvings': 'imprv·ngs',
  'increase': 'incrs', 'increases': 'incrs·s',
  'increased': 'incrs·ed',
  'interest': 'intrst',
  'interesting': 'intrst·ng',
  'interested': 'intrsted',
  'image': 'img', 'images': 'imgs',
  'innovate': 'inno·te',
  'innovation': 'inno·tion', 'innovations': 'inno·tion·s',
  'innovative': 'inno·ve',
  'immigration': 'immigr·',
  'incorporated' : 'inc·',
  'information': 'info·',
  'injury': 'inj·',
  'index': 'ind·',
  'industry': 'indus·',
  'interest': 'int·st',
  'invest': 'inv·',
  'investment': 'inv·nt',
  'investor': 'inv·tor', 'investors': 'inv·tors',
  'important': 'mptnt', 'importants': 'mptnts',
  // L- \\
  'look': 'lok', 'looks': 'loks',
  'likelyhood': 'l·k·lyh·d',
  'likewise': 'l·k·w·s·',
  'leave': 'l·ve', 'leaves': 'l·ves',
  'leaving': 'l·ving',
  'like': 'lk', 'likes': 'lk·s',
  'likely': 'lk·ly',
  'liking': 'lk·ng',
  'liked': 'lk·ed',
  'language': 'lang·', 'languages': 'lang·s',
  'laboratory': 'lab·',
  'laboratories': 'lab·s',
  'liability': 'liab·',
  'limited': 'l·t·d',
  'litigation': 'litig·',
  'large': 'l·g·',
  'little': 'lil',
  'learn': 'lrn',
  'learning': 'lrn·ng',
  'learned': 'lrn·ed',
  // M- \\
  'measure': 'msr', 'measures': 'msrs',
  'measuring': 'msr·ng', 'measurings': 'msr·ngs',
  'meet': 'mt', 'meets': 'mts',
  'meeting': 'mt·ng', 'meetings': 'mt·ngs',
  'method': 'mthd', 'methods': 'mthds',
  'matter': 'mtr', 'matters': 'mtrs',
  'make': 'mk', 'makes': 'mks',
  'making': 'mk·ng',
  'manage': 'mng', 'manages': 'mngs',
  'manager': 'mngr', 'managers': 'mngrs',
  'management': 'mng·mt',
  'managing': 'mng·ng',
  'mean': 'mn',
  'machine': 'mach·',
  'machines': 'mach·s',
  'maintenance': 'maint·  ',
  'manufacture': 'manuf·',
  'manufacturing': 'manuf·ng',
  'manufacturer': 'manuf·er',
  'market': 'mkt',
  'marketing': 'mkt·ng',
  'mechanic': 'mech·',
  'mechanical': 'mech·al',
  'medicine': 'med·',
  'merchant': 'merch·',
  'mortgage': 'mortg·',
  'mutual': 'mut·',
  'minute': 'minu·',
  'minutes': 'minu·s',
  'medium': 'm·d·',
  'millisecond': 'millisec·', 'milliseconds': 'millisec·s',
  'message': 'msg', 'messages': 'msgs',
  'messaging': 'msg·ng', 'messagings': 'msg·ngs',
  // N- \\
  'need': 'n·d',
  'needs': 'n·ds',
  'needed': 'n·ded',
  'needing': 'n·d·ng',
  'national': 'natio·',
  'natural': 'nat·',
  'necessary': 'n·c·s·ry',
  'necessarily': 'n·c·s·ly',
  'necessitate': 'n·c·state',
  'negative': 'ngtv', 'negatives': 'ngtvs',
  // O- \\
  'official': 'off·',
  'officially': 'off·ly',
  'opinion': 'opi·',
  'order': 'ord·',
  'organization': 'org·', 'organizations': 'org·s',
  'opportunity': 'op·tu·ty',
  // P- \\
  'perform': 'prfrm', 'performs': 'prfrms',
  'performance': 'prfrm·ce', 'performances': 'prfrm·ces',
  'provide': 'prvd', 'provides': 'prvd·s',
  'program': 'pr·g·m', 'programs': 'pr·g·ms',
  'president': 'pr·s·d·t',
  'partnership': 'p·ship',
  'person': 'pers·',
  'people': 'p·p·l·',
  'personal': 'pers·al',
  'politic': 'pol·', 'politics': 'pol·s',
  'political': 'pol·al',
  'probability': 'probab·',
  'probabilities': 'probab·s',
  'power': 'pwr',
  'production': 'prod·tion',
  'profession': 'profe·',
  'professional': 'profe·al',
  'property': 'prop·',
  'protection': 'prot·', 'protections': 'prot·s',
  'public': 'pub·',
  'publication': 'pub·tion', 'publications': 'pub·tions',
  'publishing': 'pub·shing',
  'psychology': 'psyc·gy',
  'psychological': 'psyc·cal',
  'psychologist': 'psyc·st',
  'progress': 'prog·',
  'progressive': 'prog·ve',
  'progressed': 'prog·ed',
  'problem': 'prob·', 'problems': 'prob·s',
  'prerequisite': 'prereq·', 'prerequisites': 'prereq·s',
  'prefer': 'pfr', 'prefers': 'pfrs',
  'preferred': 'pfr·ed',
  'preference': 'pfrnc', 'preferences': 'pfrncs',
  // R- \\
  'random': 'rndm',
  'recent': 'rcnt', 'recents': 'rcnts',
  'recently': 'rcntly',
  'result': 'rslt', 'results': 'rslts',
  'reason': 'rsn', 'reasons': 'rsns',
  'room': 'ro·m', 'rooms': 'ro·ms',
  'retirement': 'ret·',
  'search': 'srch', 'searches': 'srchs',
  'research': 'r·s·ch·', 'researchs': 'rschs',
  'reproduction': 'reprod·',
  'rehabilitation': 'rehab·',
  'regional': 'regi·al',
  'refining': 'ref·ng',
  'remember': 'remeb·', 'remembers': 'remeb·s',
  'record': 'reco·', 'records': 'reco·s',
  'recording': 'reco·ng', 'recordings': 'reco·ngs',
  'refine': 'ref·', 'refines': 'ref·s',
  'region': 'regi·', 'regions': 'regi·s',
  'register': 'reg·', 'registers': 'reg·s',
  'regulation': 'regul·', 'regulations': 'regul·s',
  'relation': 'rel·', 'relations': 'rel·s',
  'relationship': 'rel·ship', 'relationships': 'rel·ships',
  'resource': 'res·', 'resources': 'res·s',
  'restaurant': 'resta·', 'restaurants': 'resta·s',
  'road': 'r·d', 'roads': 'r·ds',
  'require': 'req·', 'requires': 'req·s',
  'required': 'req·ed',
  'requisite': 'req·s·t', 'requisites': 'req·s·t·s',
  'recipe': 'rcp', 'recipes': 'rcps',
  // S- \\
  'state': 'st·e',
  'start': 'st·t', 'starts': 'st·ts',
  'starting': 'st·tng',
  'started': 'st·ted',
  'some': 's·m·',
  'standard': 'stndrd', 'standards': 'stndrd·s',
  'separate': 'sprt', 'separates': 'sprts',
  'separating': 'sprt·ng', 'separatings': 'sprt·ngs',
  'success': 'scs',
  'successful': 'scsfl',
  'startup': 'st·tup', 'startups': 'st·tups',
  'straight': 'str8',
  'social': 'soc·',
  'scientific': 'sci·fic',
  'superpower': 's·p·r·p·w·r', 'superpowers': 's·p·r·p·w·rs',
  'school': 'sch·', 'schools': 'sch·s',
  'science': 'sci·', 'sciences': 'sci·s',
  'security': 'sec·', 'securities': 'sec·s',
  'service': 'serv·', 'services': 'serv·s',
  'shareholder': 's·holder', 'shareholders': 's·holders',
  'solution': 'sol·', 'solutions': 'sol·s',
  'street': 'st·', 'streets': 'st·s',
  'system': 'sys·', 'systems': 'sys·s',
  'second': 'sec·', 'seconds': 'sec·s',
  'serious': 's·r·s',
  'seriosly': 's·r·s·l·y',
  'shopping': 'shpng',
  'significant': 'signi·',
  // T- \\
  'they': 't·y',
  'their': 't·r',
  'these': 't·se',
  'time': 't·m·',
  'there': 't·re',
  'thereby': 't·reby',
  'them': 'th·m',
  'themselves': 'thmslvs',
  'think': 't·nk',
  'thinking': 't·nk·ng',
  'take': 't·k·',
  'through': 't·gh',
  'test': 'tst', 'tests': 'tst·s',
  'testing': 'tst·ng', 'testings': 'tst·ngs',
  'tomorrow': 't·m·r·w',
  'temporary': 'temp·',
  'teacher': 't·ch·r', 'teachers': 't·ch·rs',
  'telephone': 'tel·', 'telephones': 'tel·s',
  'technology': 'tech·', 'technologies': 'tech·s',
  'traditional': 'trad·',
  'three': 'thre',
  // U- \\
  'under': 'ndr',
  'understand': 'ndr·td',
  'uniform': 'unif·',
  'university': 'univ·',
  'utility': 'util·',
  // V- \\
  'validate': 'valdt', 'validate': 'valdts',
  'village': 'vill·',
  // W- \\
  'wisdom': 'wsdm',
  'wait': 'w8',
}
const symbol = {
  'and': '&',
  'therefore': '∴',
  'because': '∵',
  'never': '⟡',
  'not': '¬',
  'or': '||',
  'average': '⟨⟩',
  'product': '∏', 'products': '∏s',
  'empty': '∅',
  'intersection': '⋂',
  'union': '⋃',
  'difference': '∖',
  'different': '∖nt',
  'exist': '∃',
  'integer': 'ℤ',
  'number': '#', //When # prefixes a number, it is read as "number". A "#2 pencil", for example, indicates "a number-two pencil". The abbreviations 'No.' and '№' are used commonly and interchangeably.
  'numbers': '#s',
  'angle': '∠',
  'similar': '~',
  'similarly': '~ly',
  'similarity': '~rity',
  'triangle': 'Δ',
  'distance': '|x-y|',
  'population': 'μ',
  'equivalent': '↔',
  'equal': '=',
  'equals': '=s',
  'percent': '%',
  'percentage': '%age',

  'response': '℟',
}
const number = {
  'two': '2',
  'three': '3',
  'four': '4',
  'five': '5',
  'six': '6',
  'seven': '7',
  'eight': '8',
  'nine': '9',
  'ten': '10',
  'eleven': '11',
  'twelve': '12',
  'thirteen': '13',
  'fourteen': '14',
  'fifteen': '15',
  'sixteen': '16',
  'seventeen': '17',
  'eighteen': '18',
  'nineteen': '19',
  'twenty': '20',
  'twenty-one': '21',
  'twenty-two': '22',
  'twenty-three': '23',
  'twenty-four': '24',
  'twenty-five': '25',
  'twenty-six': '26',
  'twenty-seven': '27',
  'twenty-eight': '28',
  'twenty-nine': '29',
  'thirty': '30',
  'thirty-one': '31',
  'thirty-two': '32',
  'thirty-three': '33',
  'thirty-four': '34',
  'thirty-five': '35',
  'thirty-six': '36',
  'thirty-seven': '37',
  'thirty-eight': '38',
  'thirty-nine': '39',
  'forty': '39',
}
const chinese = {
  'come': '来',
  'that': '那',
  'this': '这',
  'which': '哪',
  'also': '也',
  'consider': '考',
  'considering': '考ng',
  'corpse': '尸',
  'ancient': '古',
  'study': '学',
  'studying': '学ng',
  'student': '学ent',
  'individual': '个',
  'good': '好',
  'from': '从',
  'power': '力',
  'powerful': '力ful',
  'reflection': '映',
  'release': '解',
  'open': '开',
  'opens': '开s',
  'both': '都',
  'day': '天',
  'days': '天s',
  'furthermore': '而',
  'again': '又',
  'against': '又st',
  'vegetable': '菜',
  'vegetables': '菜s',
  'use': '用',
  'exceed': '逾',
  'exceeded': '逾ed',
  'myself': '我',
  'many': '多',
  'see': '见',
  'other': '别',
  'another': '再',
  'enclose': '囗',
  'earth': '土',
  'big': '大',
  'bigger': '大er',
  'woman': '女',
  'child': '子',
  'children': '子ren',
  'childhood': '子hood',
  'small': '小',
  'work': '工', 'works': '工s',
  'worked': '工ed',
  'worker': '工er',
  'working': '工ing',
  'network': 'net工',
  'framework': 'frame工',
  'workshop': '工shop',
  'workplace': '工place',
  'homework': 'home工',
  'workout': '工out',
  'thing': '事',
  'things': '事s',
  'something': 'some事',
  'anything': 'any事',
  'nothing': 'no事',
  'everything': 'every事',
  'middle': '中',
  'place': '所',
  'year': '年',
  'years': '年s',
  'eat': '食',
  'show': '示',
  'shows': '示s',
  'deep': '深',
  'deeply': '深ly',
  'give': '给',
  'find': '发现',
  'more': '还',
  'moreover': '还ovr',
  'up': '上',
  'down': '下',
  'talk': '话',
  'where': '焉',
  'everywhere': 'every焉',
  'somewhere': 'some焉',
  'anywhere': 'any焉',
  'elsewhere': 'else焉',
  'whereas': '焉as',
  'nowwhere': 'now焉',
  'wherever': '焉ver',
  'lose': '失',
  'loser': '失r',
  'mother': '母',
  'grandmother': '祖母',
  'month': '月',
  'since': '自',
  'each': '各',
  'word': '字',
}


const output = document.getElementById('output');
const output2 = document.getElementById('output2');
const input = document.getElementById('input');
const form = document.getElementById('form');

form.addEventListener('submit', (e) => {
  e.preventDefault();
    
  const text = input.value;
  output.innerHTML = text;
  output2.innerHTML = formatting( blocking(text.split(" ")) );
})

function formatting(text) {
  //Split text into words inside an array.
  const words = text.split(" ");
  words.unshift('<span id="phrase">')

  for (let word of words) {
    console.log(word);
    // (!)You hv to mk it ignore the comma and period. charAt?
    if(icon.hasOwnProperty(word)) words[words.indexOf(word)] = `<span style="color: purple" class="tip" data-text="${word}">${icon[word]}</span>`;
    if(abbreviation.hasOwnProperty(word)) words[words.indexOf(word)] = `<span style="color: green" class="tip" data-text="${word}">${abbreviation[word]}</span>`;
    if(number.hasOwnProperty(word)) words[words.indexOf(word)] = number[word];
    if(symbol.hasOwnProperty(word)) words[words.indexOf(word)] = `<span class="text-primary tip" data-text="${word}">${symbol[word]}</span>`;
    if(chinese.hasOwnProperty(word)) words[words.indexOf(word)] = `<span class="text-danger tip" data-text="${word}" style="font-size: 20px">${chinese[word]}</span>`;

    for(let char of word) {
      if(char == '.') words[words.indexOf(word)] = `${word}</span><br><span id="phrase">`;
    }

  }
  return words.join(" ");
}

function blocking(arr) {
  let strArr = [];

  for(let i = 0; i < arr.length; i += 2) {
    strArr.push('<span class="block">[</span>', arr[i])
    strArr.push(arr[i + 1], '<span class="block">] </span>');
  }

  return strArr.join(" ");
}

// Split text into words inside an array.
// If word inside array match with icon, then 
 //arr[index] = matched icon


// make it stop on command if (scroll) else don't scroll 
function autoPageScroll() {
  //incrementing by y every z milliseconds
  window.scrollBy(0,300 /*y*/);
  scrolldelay = setTimeout(autoPageScroll,20000 /*y*/);
}

function givingDefi() {
  
}



console.log("The total words:", 
              Object.keys(chinese).length + 
              Object.keys(number).length +
              Object.keys(symbol).length +
              Object.keys(abbreviation).length +
              Object.keys(icon).length
           );