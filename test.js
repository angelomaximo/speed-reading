const icon = {
  // ' ': '<img class="icon" src="./img/ .png">',
  // Countries a-z \\
  'brazil': '🇧🇷',
  'usa': '🇺🇸', 

  // Colors a-z \\
  'black': '<img class="icon" src="./img/black-circle.png">',
  'blue': '<img class="icon" src="./img/blue-circle.png">',
  'brown': '<img class="icon" src="./img/brown-circle.png">',
  'gray': '<img class="icon" src="./img/gray-circle.png">',
  'green': '<img class="icon" src="./img/green-circle.png">',
  'purple': '<img class="icon" src="./img/purple-circle.png">',
  'red': '<img class="icon" src="./img/red-circle.png">',
  'white': '<img class="icon" src="./img/white-circle.png">',
  'yellow': '<img class="icon" src="./img/yellow-circle.png">',

  // Foods a-z \\
  'apple': '🍎',
  'banana': '🍌',
  'coffee': '<img class="icon" src="./img/coffee.png">',
  'ice-cream': '🍦',
  'strawberry': '🍓',

  'meat': '🥩',

  // Institutions a-z \\
  'bank': '🏛️',
  'hospital': '🏥',
  
  // Human body a-z  \\
  'abdominals': '<img alt="abdominals" class="icon" src="./img/abdominals.png">',
  'arm': '<img class="icon" src="./img/arm.png">',
  'beard': '<img class="icon" src="./img/beard.png">',
  'blood': '<img class="icon" src="./img/blood.png">',
  'brain': '🧠',
  'ear': '<img class="icon" src="./img/ear.png">',
  'eye': '👁️',
  'fingerprint': '<img class="icon" src="./img/fingerprint.png">',
  'head': '<img class="icon" src="./img/head.png">',
  'intestine': '<img class="icon" src="./img/intestine.png">',
  'kidneys': '<img class="icon" src="./img/kidneys.png">',
  'leg': '🦵',
  'lips': '<img class="icon" src="./img/lips.png">',
  'liver': '<img class="icon" src="./img/liver.png">',
  'lungs': '<img class="icon" src="./img/lungs.png">',
  'muscle': '<img class="icon" src="./img/muscle.png">',
  'neuron': '<img class="icon" src="./img/neuron.png">',
  'nose': '<img class="icon" src="./img/nose.png">',
  'skin': '<img class="icon" src="./img/skin.png">',
  'skull': '<img class="icon" src="./img/skull.png">',
  'sperm': '<img class="icon" src="./img/sperm.png">',
  'spine': '<img class="icon" src="./img/spine.png">',
  'stomach': '<img class="icon" src="./img/stomach.png">',
  'teeth': '<img class="icon" src="./img/teeth.png">',
  'tongue': '<img class="icon" src="./img/tongue.png">',
  
  // Animals a-z \\
  'cat': '🐱',
  'dog': '🐕',

  // General \\
  'world': '🌎',
  'real-world': 'real-🌎',
  'computer': '🖥️',
  'book': '📘',
  'currency': '🪙',
  'pill': '💊',
  'television': '<img class="icon" src="./img/television.png">',
  'wood': '🪵',
  'railway': '🛤️',
  'railroad': '!!!railroad icon needed!!!'
}
const abbreviation = {
  // ·ment = mt 
  // ing = ng
  // cal = al
  'about': 'ab·t',
  'before': 'b4',
  'background': 'b·g·d',
  'check': 'ch·k',
  'email': 'em·l',
  'character': 'char·',
  'business': 'bus·',
  'example': 'exmp·',
  'company': 'com·',
  'companies': 'com·ies',
  'corporate': 'corp·',
  'accommodation': 'accomm·',
  'adjective': 'adj·',
  'contamination': 'contam·',
  'experience': '·xp·',
  'expense': 'exp·',
  'traditional': 'trad·',
  'entrepreneur': 'entrep·',
  'entrepreneurs': 'entrep·s',
  'entrepreneurship': 'entrep·ship',
  'entrepreneurial': 'entrep·rial',
  'innovate': 'inno·te',
  'innovation': 'inno·tion',
  'innovations': 'inno·tion·s',
  'innovative': 'inno·ve',
  'development': 'dev·mt',
  'developer': 'dev·r',
  'example': 'ex·',
  'technology': 'tech·',
  'technologies': 'tech·s',
  'problem': 'prob·',
  'problems': 'prob·s',
  'employ': 'emp·',
  'employ': 'emp·s',
  'employee': 'emp·ee',
  'employees': 'emp·ees',
  'employer': 'emp·er',
  'employers': 'emp·ers',
  'requisite': 'req·',
  'requisites': 'req·s',
  'prerequisite': 'prereq·',
  'prerequisites': 'prereq·s',
  'manage': 'm·n·g·',
  'manager': 'm·n·ger',
  'management': 'mng·mt',
  'managing': 'mng·ng',
  'mean': 'm·n',
  'experiment': 'exper·mt',
  'experimentation': 'exper·ntion',
  'message': 'm·s·g·',
  'serious': 's·r·s',
  'seriosly': 's·r·s·l·y',
  'people': 'p·p·l·',
  'wait': 'w8',
  'academic': 'acad·',
  'account': 'acct·',
  'accountant': 'acct·ant',
  'accounting': 'acct·ng',
  'administration': '!administration!',
  'administrator': 'adm·',
  'administrative': 'admin·',
  'agriculture': 'agric·',
  'agricultural': 'agric·al',
  'alternative': 'alt·',
  'association': 'assoc·',
  'associate': 'assoc·te',
  'authentication': 'auth·',
  'authenticate': 'auth·cate',
  'authority': 'autho·',
  'avenue': 'ave·',
  'bankruptcy': 'bankr·',
  'brotherhood': 'bhd·',
  'brother': 'bro·',
  'brothers': 'bro·s',
  'build': 'b·l·d',
  'building': 'b·l·d·ng',
  //'because': '·c·us·',
  'capital': 'cap·t·',
  'catholic': 'cath·',
  'center': 'c·t·r',
  'centre': 'c·t·r',
  'central': 'ctr·al',
  'chemistry': 'chem·',
  'chemical': 'chem·al',
  'college': 'coll·',
  'commerce': 'com·r·c',
  'commercial': 'com·r·cial',
  'community': 'c·m·ty',
  'compensation': 'comp·',
  'condominium': 'condo·',
  'consolidated': 'consol·',
  'construction': 'constr·',
  'contract': 'cont·',
  'cooperative': 'coop·',
  'correction': 'corr·',
  'defense': 'def·',
  'defend': 'def·nd',
  'defender': 'def·der',
  'department': 'dep·mt',
  'detention': 'det·',
  'digital': 'digi·',
  'direction': 'dir·',
  'director': 'direc·',
  'distribution': 'dist·',
  'distributing': 'dist·ng',
  'distributor': 'dist·tor',
  'division': 'div·',
  'document': 'doc·',
  'doctor': 'D·r',
  'economy': 'econ·',
  'economic': 'econ·ic',
  'economics': 'eco·ics',
  'economical': 'econ·cal',
  'electric': 'elec·',
  'electrical': 'elec·ical',
  'electricity': 'elec·ity',
  'engine': 'eng·',
  'engineering': 'eng·ng',
  'engineer': 'eng·eer',
  'entertainment': 'ent·mt',
  'environment': 'env·mt',
  'equipment': 'equip·',
  'exchange': 'exch·',
  'execution': 'exec·',
  'executive': 'exec·ve',
  'exploration': 'expl·',
  'federal': 'fed·',
  'federation': 'fed·tion',
  'finance': 'fin·',
  'financing': 'fin·ng',
  'financial': 'fin·ial',
  'foundation': 'foun·tion',
  'general': 'gen·',
  'global': 'glob·',
  'government': 'gov·',
  'group': 'gr·p',
  'immigration': 'immigr·',
  'incorporated' : 'inc·',
  'information': 'info·',
  'injury': 'inj·',
  'industry': 'indus·',
  'interest': 'int·st',
  'integer': 'int·',
  'invest': 'inv·',
  'investment': 'inv·nt',
  'investor': 'inv·tor',
  'language': 'lang·',
  'laboratory': 'lab·',
  'laboratories': 'lab·s',
  'liability': 'liab·',
  'limited': 'l·t·d',
  'litigation': 'litig·',
  'machine': 'mach·',
  'machines': 'mach·s',
  'maintenance': 'maint·',
  'manufacture': 'manuf·',
  'manufacturing': 'manuf·ng',
  'manufacturer': 'manuf·er',
  'market': 'm·k·t',
  'marketing': 'm·k·t·ng',
  'mechanic': 'mech·',
  'mechanical': 'mech·al',
  'medicine': 'med·',
  'merchant': 'merch·',
  'mortgage': 'mortg·',
  'mutual': 'mut·',
  'national': 'natio·',
  'natural': 'nat·',
  'number': 'num·',
  'official': 'off·',
  'opinion': 'opi·',
  'order': 'ord·',
  'organization': 'org·',
  'partnership': 'p·ship',
  'person': 'pers·',
  'personal': 'pers·al',
  'politic': 'pol·',
  'politics': 'pol·s',
  'political': 'pol·al',
  //'product': 'prod·',
  'production': 'prod·tion',
  'profession': 'profe·',
  'professional': 'profe·al',
  'property': 'prop·',
  'protection': 'prot·',
  'public': 'pub·',
  'publication': 'pub·tion',
  'publishing': 'pub·shing',
  'record': 'reco·',
  'recording': 'reco·ng',
  'refine': 'ref·',
  'refining': 'ref·ng',
  'region': 'regi·',
  'regional': 'regi·al',
  'register': 'reg·',
  'regulation': 'regul·',
  'rehabilitation': 'rehab·',
  'relation': 'rel·',
  'relationship': 'rel·ship',
  'reproduction': 'reprod·',
  'research': 'r·s·ch·',
  'resource': 'res·',
  'resources': 'res·s',
  'restaurant': 'resta·',
  'retirement': 'ret·',
  'rights': 'r·ts',
  'road': 'r·d',
  'school': 'sch·',
  'schools': 'sch·s',
  'science': 'sci·',
  'scientific': 'sci·fic',
  'security': 'sec·',
  'securities': 'sec·s',
  'service': 'serv·',
  'shareholder': 's·holder',
  'social': 'soc·',
  'solution': 'sol·',
  'street': 'st·',
  'system': 'sys·',
  'systems': 'sys·s',
  'teacher': 't·ch·r',
  'teachers': 't·ch·rs',
  'telephone': 'tel·',
  'temporary': 'temp·',
  'uniform': 'unif·',
  'university': 'univ·',
  'utility': 'util·',
  'village': 'vill·',
  'with': 'w/',
  'whatever': 'w/e',
}
const symbol = {
  'and': '&',
  'therefore': '∴',
  'because': '∵',
  'never': '⟡',
  'not': '¬',
  'or': '||',
  'average': '⟨⟩',
  'product': '∏',
  'empty': '∅',
  'intersection': '⋂',
  'union': '⋃',
  'difference': '∖',
  'exist': '∃'
}

const number = {
  'two': '2',
  'three': '3',
  'four': '4',
  'five': '5',
  'six': '6',
  'seven': '7',
  'eight': '8',
  'nine': '9',
  'ten': '10',
  'eleven': '11',
  'twelve': '12',
  'thirteen': '13',
  'fourteen': '14',
  'fifteen': '15',
  'sixteen': '16',
  'seventeen': '17',
  'eighteen': '18',
  'nineteen': '19',
  'twenty': '20',
  'twenty-one': '21',
  'twenty-two': '22',
  'twenty-three': '23',
  'twenty-four': '24',
  'twenty-five': '25',
  'twenty-six': '26',
  'twenty-seven': '27',
  'twenty-eight': '28',
  'twenty-nine': '29',
  'thirty': '30',
  'thirty-one': '31',
  'thirty-two': '32',
  'thirty-three': '33',
  'thirty-four': '34',
  'thirty-five': '35',
  'thirty-six': '36',
  'thirty-seven': '37',
  'thirty-eight': '38',
  'thirty-nine': '39',
  'forty': '39',
}

const output = document.getElementById('output');
const output2 = document.getElementById('output2');
const input = document.getElementById('input');
const form = document.getElementById('form');

form.addEventListener('submit', (e) => {
  e.preventDefault();
    
  const text = input.value;
  output.innerHTML = formatting( text );
  output2.innerHTML = formatting( blocking(text.split(" ")) );
})

function formatting(text) {
  //Split text into words inside an array.
  const words = text.split(" ");
  words.unshift('<span class="phrase">')

  for (let word of words) {
    // (!)You have to make it ignore the comma and period
    if(icon.hasOwnProperty(word)) words[words.indexOf(word)] = icon[word];
    if(abbreviation.hasOwnProperty(word)) words[words.indexOf(word)] = `<span class="text-danger">${abbreviation[word]}</span>`;
    if(number.hasOwnProperty(word)) words[words.indexOf(word)] = number[word];
    if(symbol.hasOwnProperty(word)) words[words.indexOf(word)] = `<span class="text-primary">${symbol[word]}</span>`;

  }
  return words.join(" ");
}


// phrase frequency \\
 // pick 2 words in array => that I must
  // glue them
  // push newArr with [gluedWords, index]
  // index += 1
// I can find a word that substitute that or transform into acronym